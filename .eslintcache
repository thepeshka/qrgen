[{"/home/peshka/Dev/qrgen/src/reportWebVitals.js":"1","/home/peshka/Dev/qrgen/src/index.js":"2","/home/peshka/Dev/qrgen/src/App.js":"3","/home/peshka/Dev/qrgen/src/formsData.js":"4","/home/peshka/Dev/qrgen/src/containers/qrForm/index.js":"5","/home/peshka/Dev/qrgen/src/views/saveQrModal/index.js":"6","/home/peshka/Dev/qrgen/src/views/mainLayout/index.js":"7"},{"size":362,"mtime":1609605946506,"results":"8","hashOfConfig":"9"},{"size":529,"mtime":1609611584471,"results":"10","hashOfConfig":"9"},{"size":700,"mtime":1610139219052,"results":"11","hashOfConfig":"9"},{"size":2837,"mtime":1610135553656,"results":"12","hashOfConfig":"9"},{"size":3379,"mtime":1610149651363,"results":"13","hashOfConfig":"9"},{"size":4671,"mtime":1610148366194,"results":"14","hashOfConfig":"9"},{"size":2717,"mtime":1610149420809,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1wmzmax",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/peshka/Dev/qrgen/src/reportWebVitals.js",[],["33","34"],"/home/peshka/Dev/qrgen/src/index.js",[],["35","36"],"/home/peshka/Dev/qrgen/src/App.js",[],"/home/peshka/Dev/qrgen/src/formsData.js",[],"/home/peshka/Dev/qrgen/src/containers/qrForm/index.js",["37","38"],"/home/peshka/Dev/qrgen/src/views/saveQrModal/index.js",["39","40","41","42"],"import React, { useState } from 'react';\nimport { Modal, Form, InputNumber, Select, Row, Col, Input, Slider, Radio, Button, Checkbox } from 'antd';\nimport {CompactPicker} from 'react-color';\nimport QRCode from 'qrcode.react';\nimport styled from \"styled-components\";\n\nconst Option = Select.Option;\n\nconst QRCodeStyled = styled.div`\n  display: flex;\n  box-shadow: 0 0 20px 0 #00000045;\n  margin: 0 auto 20px auto;\n  height: 200px;\n  width: 200px;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst QRCodeWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst SaveQrModal = ({qrData, onClose}) => {\n  const [qrSettings, setQrSettings] = useState({\n    size: 200,\n    includeMargin: true,\n    bgColor: \"#ffffff\",\n    fgColor: \"#000000\",\n    level: \"L\",\n    addImage: false,\n    imageSource: \"\",\n    imageWidth: 10,\n    imageHeight: 10,\n    imageCenter: false,\n    imageX: 0,\n    imageY: 0,\n    imageExcavate: true\n  });\n\n  const [imgFormat, setImgFormat] = useState('png');\n\n  const qrCodeProps = {\n    size: qrSettings.size <= 200 ? qrSettings.size : 200,\n    includeMargin: qrSettings.includeMargin,\n    bgColor: qrSettings.bgColor,\n    fgColor: qrSettings.fgColor,\n    level: qrSettings.level,\n    renderAs: imgFormat === \"svg\" ? \"svg\" : \"canvas\"\n  };\n\n  if (qrSettings.addImage) {\n    qrCodeProps.imageSettings = {\n      src: qrSettings.imageSource,\n      excavate: qrSettings.imageExcavate,\n      width: qrSettings.imageWidth,\n      height: qrSettings.imageHeight\n    }\n    if (qrSettings.imageCenter) {\n      qrCodeProps.imageSettings = {\n        ...qrCodeProps.imageSettings,\n        x: qrSettings.imageX,\n        y: qrSettings.imageY\n      }\n    }\n  }\n\n  const downloadBlob = (blob, filename) => {\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = filename;\n    link.href = url;\n    document.body.appendChild(link);\n    link.click();\n    URL.revokeObjectURL(url);\n    document.body.removeChild(link);\n  }\n\n  const saveImg = () => {\n    const mimetype = {png: \"image/png\", jpg: \"image/jpeg\"}[imgFormat];\n    const canvas = document.getElementById('qrCode');\n    canvas.toBlob(function(blob) {\n      downloadBlob(blob, `qrgen_${Date.now()}.${imgFormat}`);\n    }, mimetype, 1);\n    onClose();\n  }\n\n  const saveSvg = () => {\n    const svgEl = document.getElementById('qrCode');\n    const svg = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\" + svgEl.outerHTML.slice(4)\n    const blob = new Blob([svg], {type: 'image/svg+xml'});\n    downloadBlob(blob, `qrgen_${Date.now()}.${imgFormat}`);\n  }\n\n  const handleSave = () => {\n    if (imgFormat === 'svg') saveSvg(); else saveImg();\n  };\n\n  const [form] = Form.useForm();\n\n  return (\n    <Modal\n      title=\"Save QR code\"\n      visible={true}\n      onOk={handleSave}\n      onCancel={onClose}\n      okText=\"Save\"\n      footer={[\n        <Radio.Group value={imgFormat} onChange={e => setImgFormat(e.target.value)}>\n          <Radio value=\"png\">PNG</Radio>\n          <Radio value=\"jpg\">JPG</Radio>\n          <Radio value=\"svg\">SVG</Radio>\n        </Radio.Group>,\n        <Button key=\"back\" onClick={onClose}>\n          Cancel\n        </Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={handleSave}>\n          Save\n        </Button>,\n      ]}\n    >\n      <QRCodeWrapper>\n        <QRCodeStyled>\n          <QRCode id=\"qrCode\" value={qrData} {...qrCodeProps}/>\n        </QRCodeStyled>\n      </QRCodeWrapper>\n      <Form\n        form={form}\n        onValuesChange={v => setQrSettings({...qrSettings, ...v})}\n        initialValues={qrSettings}\n        labelCol={{span: 8}}\n        wrapperCol={{span: 16}}\n      >\n        <Form.Item name=\"size\" label=\"Size\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item name=\"includeMargin\" valuePropName=\"checked\" wrapperCol={{offset: 8, span: 16}}>\n          <Checkbox>Margin</Checkbox>\n        </Form.Item>\n        <Form.Item label=\"Foreground Color\">\n          <CompactPicker color={qrSettings.fgColor} onChange={c => setQrSettings({...qrSettings, fgColor: c.hex})}/>\n        </Form.Item>\n        <Form.Item label=\"Background Color\">\n          <CompactPicker color={qrSettings.bgColor} onChange={c => setQrSettings({...qrSettings, bgColor: c.hex})}/>\n        </Form.Item>\n        <Form.Item name=\"level\" label=\"Error correction level\">\n          <Select onChange={v => form.setFieldsValue({level: v})}>\n            <Option default value=\"L\">L</Option>\n            <Option value=\"M\">M</Option>\n            <Option value=\"Q\">Q</Option>\n            <Option value=\"H\">H</Option>\n          </Select>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default SaveQrModal;\n","/home/peshka/Dev/qrgen/src/views/mainLayout/index.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"43","replacedBy":"47"},{"ruleId":"45","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":16,"nodeType":"51","messageId":"52","endLine":2,"endColumn":25},{"ruleId":"49","severity":1,"message":"53","line":2,"column":27,"nodeType":"51","messageId":"52","endLine":2,"endColumn":33},{"ruleId":"49","severity":1,"message":"54","line":2,"column":44,"nodeType":"51","messageId":"52","endLine":2,"endColumn":47},{"ruleId":"49","severity":1,"message":"55","line":2,"column":49,"nodeType":"51","messageId":"52","endLine":2,"endColumn":52},{"ruleId":"49","severity":1,"message":"56","line":2,"column":54,"nodeType":"51","messageId":"52","endLine":2,"endColumn":59},{"ruleId":"49","severity":1,"message":"57","line":2,"column":61,"nodeType":"51","messageId":"52","endLine":2,"endColumn":67},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],["58"],["59"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Input' is defined but never used.","'Slider' is defined but never used.","no-global-assign","no-unsafe-negation"]